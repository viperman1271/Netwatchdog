# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build

on:
  push:
    branches: 
      - "master"
    tags:
      - v*.*.*
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Git Submodule Init
      shell: bash
      run: |
        git submodule update --init --recursive

    - name: Install vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        ./vcpkg/bootstrap-vcpkg.sh
    
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/build/vcpkg_installed
        key: ${{ runner.os }}-${{ matrix.cpp_compiler }}-vcpkg-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.cpp_compiler }}-vcpkg-${{ hashFiles('vcpkg.json') }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-${{ runner.os }}-${{ matrix.cpp_compiler }}
        path: ${{ github.workspace }}/bin

  deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [clang]
        include:
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts-${{ runner.os }}-${{ matrix.cpp_compiler }}
          path: ${{ github.workspace }}/bin

      - name: Create tmp directories
        run: |
          mkdir ${{ github.workspace }}/tmp
          mkdir ${{ github.workspace }}/tmp/server
          mkdir ${{ github.workspace }}/tmp/client
          mkdir ${{ github.workspace }}/tmp/web

      - name: Copy files to correct location
        run: |
          cp ${{ github.workspace }}/bin/netwatchdogd ${{ github.workspace }}/tmp/server/.
          cp ${{ github.workspace }}/docker/server/* ${{ github.workspace }}/tmp/server/.
          cp ${{ github.workspace }}/bin/netwatchdogc ${{ github.workspace }}/tmp/client/.
          cp ${{ github.workspace }}/docker/client/* ${{ github.workspace }}/tmp/client/.
          cp ${{ github.workspace }}/bin/web ${{ github.workspace }}/tmp/web/.
          cp ${{ github.workspace }}/docker/web/* ${{ github.workspace }}/tmp/web/.
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from tag
        id: extract_version
        run: echo "::set-output name=version::${GITHUB_REF#refs/tags/}"

      - name: Build and push server Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./tmp/server
          push: true
          tags: |
            viperman1271/netwatchdog-server:${{ steps.extract_version.outputs.version }}
            viperman1271/netwatchdog-server:latest

      - name: Build and push client Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./tmp/client
          push: true
          tags: |
            viperman1271/netwatchdog-client:${{ steps.extract_version.outputs.version }}
            viperman1271/netwatchdog-client:latest

      - name: Build and push server web image
        uses: docker/build-push-action@v4
        with:
          context: ./tmp/web
          push: true
          tags: |
            viperman1271/netwatchdog-web:${{ steps.extract_version.outputs.version }}
            viperman1271/netwatchdog-web:latest
